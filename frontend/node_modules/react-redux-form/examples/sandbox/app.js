import React, { Component } from 'react'
import ReactDOM from 'react-dom'
import _ from 'lodash';

import { createStore, applyMiddleware, combineReducers, compose } from 'redux'
import { Provider, connect } from 'react-redux'
// import { Form, Control, Errors, combineForms, actions } from 'react-redux-form'
import thunk from 'redux-thunk';
import createLogger from 'redux-logger';

const logger = createLogger();

import {
  Field,
  Fieldset,
  Errors,
  Control,
  Form,
  LocalForm,
  combineForms,
  actions,
  formReducer,
  modeled,
  controls
} from 'react-redux-form';

const initialUserState = {
  firstName: '',
  lastName: '',
};

const store = createStore(combineForms({
  user: initialUserState,
}), applyMiddleware(thunk, logger));

class UserForm extends Component {
  constructor() {
    super();

    this.state = { page: 1 };

    this.goTo = this.goTo.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  goTo(page) {
    this.setState({ page });
  }

  handleSubmit(v) {
    console.log(v);

    this.props.setFieldsErrors("user", {
      firstName: ["is in big trouble"],
      lastName: ["is async error"]
    }, {async: true});
  }

  render() {
    const { page } = this.state;

    return (
      <Form model="user" onSubmit={this.handleSubmit}>
        {page === 1 && (
          <div>
            <div className="field">
              <label>First name:</label>
              <Errors model=".firstName" messages={{ isEmpty: "it's empty" }} show />
              <Control.text model=".firstName" errors={{ isEmpty: value => !value.length }} />
            </div>

            <button type="button" onClick={() => this.goTo(2)}>
              Next &gt;
            </button>
           </div>
        )}

        {page === 2 && (
          <div>
            <div className="field">
              <label>Last name:</label>
              <Errors model=".lastName" messages={{ isEmpty: "it's empty" }} show />
              <Control.text model=".lastName" errors={{ isEmpty: value => !value.length }} />
            </div>

            <button type="button" onClick={() => this.goTo(1)}>
              &lt; Back
            </button>

            <button type="submit">
              Submit
            </button>
           </div>
        )}
      </Form>
    )
  }
}

const ConnectedUserForm = connect(state => ({
  state,
}), {
  setFieldsErrors: actions.setFieldsErrors,
})(UserForm);

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <ConnectedUserForm />
      </Provider>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));
